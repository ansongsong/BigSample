<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans-3.1.xsd 
		http://www.springframework.org/schema/mvc 
		http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd 
		http://www.springframework.org/schema/context 
		http://www.springframework.org/schema/context/spring-context-3.1.xsd 
		http://www.springframework.org/schema/aop 
		http://www.springframework.org/schema/aop/spring-aop-3.1.xsd 
		http://www.springframework.org/schema/tx 
		http://www.springframework.org/schema/tx/spring-tx-3.1.xsd ">

	<!-- 加载配置文件 -->
	<context:property-placeholder location="classpath:db.properties" />

	<!-- 数据库连接池 -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
		<property name="driverClassName" value="${jdbc.driver}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<!-- 开发阶段建议最大连接数据尽量少，够用即可 -->
		<property name="maxActive" value="${jdbc.maxActive}" />
		<property name="maxIdle" value="${jdbc.maxIdle}" />
	</bean>
	<!-- 事务管理器 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<!-- 数据源 -->
		<property name="dataSource" ref="dataSource" />
	</bean>




	<!-- start -->
	<!-- <bean id="broker" class="org"> </bean> -->
	<!-- <property name="brokerURL" value="tcp://192.168.1.8:61616" /> -->
	<!-- org.apache.activemq.pool.PooledConnectionFactory@1abb87e -->
	<!-- 通知 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<!-- 传播行为 -->
			<tx:method name="save*" propagation="REQUIRED"
				rollback-for="java.lang.Exception" />
			<tx:method name="insert*" propagation="REQUIRED"
				rollback-for="java.lang.Exception" />
			<tx:method name="delete*" propagation="REQUIRED"
				rollback-for="java.lang.Exception" />
			<tx:method name="update*" propagation="REQUIRED"
				rollback-for="java.lang.Exception" />
			<tx:method name="find*" propagation="SUPPORTS" read-only="true" />
			<tx:method name="get*" propagation="SUPPORTS" read-only="true" />
		</tx:attributes>
	</tx:advice>

	<!-- 切面 -->
	<aop:config proxy-target-class="true">
		<aop:advisor advice-ref="txAdvice"
			pointcut="execution(* simple.*.service.impl.*.*(..))" />
	</aop:config>
	
	
	
	
	
	<!-- activeMQ配置 --><!--jms 连接池 -->
	<bean id="jmsFactory" class="org.apache.activemq.pool.PooledConnectionFactory"
		destroy-method="stop">
		<property name="connectionFactory">
			<bean class="org.apache.activemq.ActiveMQConnectionFactory">
				<property name="brokerURL" value="tcp://192.168.1.8:61616" />
				<!-- <property name="brokerURL"> <value>tcp://192.168.1.8:61616</value> 
					</property> -->

			</bean>
		</property>
		<property name="maxConnections" value="100"></property>
	</bean>
	<!-- jmsTemplate -->
	<bean id="jmsTemplate" class="org.springframework.jms.core.JmsTemplate">
		<property name="connectionFactory" ref="jmsFactory"></property>
		<property name="defaultDestination" ref="destinationTopic"></property>
		<property name="messageConverter">
			<bean
				class="org.springframework.jms.support.converter.SimpleMessageConverter"></bean>
		</property>
	</bean>
	<!-- destination queue -->
	<bean id="destination" class="org.apache.activemq.command.ActiveMQQueue">
		<constructor-arg index="0" value="spring-queue"></constructor-arg>
	</bean>
	<!-- destination topic -->
	<bean id="destinationTopic" class="org.apache.activemq.command.ActiveMQTopic">
		<constructor-arg index="0" value="spring-topic"></constructor-arg>
	</bean>
	<!-- -->
	<bean id="jmsContainer"
		class="org.springframework.jms.listener.DefaultMessageListenerContainer">
		<property name="connectionFactory" ref="jmsFactory"></property>
		<property name="destination" ref="destinationTopic"></property>
		<property name="messageListener" ref="messageListener"></property>
	</bean>
	<bean id="messageListener" class="simple.base.jms.listener.MyMessageListener">
	</bean>
	<!-- end -->



   	
   <!-- ===================================  配置Memcached =============================== -->  
     <!-- 开启缓存 -->    
   <!--  <cache:annotation-driven cache-manager="cacheManager" proxy-target-class="true" />  -->  
    <!-- 导入外部properties -->  
   <!--  <context:property-placeholder location="classpath:hometree.properties"/>-->    
      <!-- 
     <bean id="memcachedPool" class="com.danga.MemCached.SockIOPool"  
        factory-method="getInstance" init-method="initialize" destroy-method="shutDown">  
       <constructor-arg>  
            <value>neeaMemcachedPool</value>  
        </constructor-arg>  
        <property name="servers">  
            <list>  
                <value>${memcache.server}</value>  
            </list>  
        </property>  
        <property name="initConn">  
            <value>${memcache.initConn}</value>  
        </property>  
        <property name="minConn">  
            <value>${memcache.minConn}</value>  
        </property>  
        <property name="maxConn">  
            <value>${memcache.maxConn}</value>  
        </property>  
        <property name="maintSleep">  
            <value>${memcache.maintSleep}</value>  
        </property>  
        <property name="nagle">  
            <value>${memcache.nagle}</value>  
        </property>  
        <property name="socketTO">  
            <value>${memcache.socketTO}</value>  
        </property>  
    </bean>  -->  
      
    <!-- 配置MemcachedClient -->   <!--
    <bean id="memcachedClient" class="com.danga.MemCached.MemCachedClient">  
        <constructor-arg>  
            <value>neeaMemcachedPool</value>  
        </constructor-arg>  
    </bean>  
      -->  
    <!-- 配置缓存管理 -->  <!--
    <bean id="cacheManager" class="hometree.esc.cache.memcached.MemcachedCacheManager">  
        <property name="memcachedClient" ref="memcachedClient"/>  --> 
        <!-- 配置缓存时间 -->  <!-- 
        <property name="configMap">  
             <map>   --> 
                 <!-- key缓存对象名称   value缓存过期时间 -->   <!-- 
                 <entry key="systemCache" value="3600"/>  
             </map>  
        </property>  
    </bean>  -->
    <!--=====结束=严重: Exception sending context destroyed event to listener instance of class org.springframework.web.context.ContextLoaderListener
java.lang.IllegalStateException: BeanFactory not initialized or already closed - call 'refresh' before accessing beans via the ApplicationContext======================= -->	
    	   
    	   <!-- org.springframework.cache.interceptor.CacheInterceptor -->
   
    
    <!-- 
     <cache:annotation-driven cache-manager="cacheManager" proxy-target-class="true" /> 
     
   
      <bean id="memcachedClientBuilder" class="net.rubyeye.xmemcached.XMemcachedClientBuilder">  
        <constructor-arg>  
            <list>  
                <bean class="java.net.InetSocketAddress">  
                    <constructor-arg value="192.168.1.103" />  
                    <constructor-arg value="2222" />  
                </bean>  
            </list>  
        </constructor-arg>  
        <property name="connectionPoolSize" value="5" />  
        <property name="commandFactory">  
            <bean class="net.rubyeye.xmemcached.command.BinaryCommandFactory" />  
        </property>  
        <property name="transcoder">  
            <bean class="net.rubyeye.xmemcached.transcoders.SerializingTranscoder" />  
        </property>  
    </bean>  
  
    <bean id="memcachedClient" factory-bean="memcachedClientBuilder"  
        factory-method="build" destroy-method="shutdown" />  
          
    <bean id="cacheManager" class="hometree.esc.cache.memcached.MemcachedCacheManager">  
        <property name="memcachedClient" ref="memcachedClient" />  
        <property name="configMap">  
            <map>  --> 
                <!-- key：@Cacheable、@CachePut、@CacheEvict等的value属性。value：缓存过期时间(单位：秒)，默认值：0  
                <entry key="defaultCache" value="0" />--> <!-- 默认缓存区 不过期
                <entry key="inTimeCache" value="3600" />--> <!-- 实时缓存区 一小时过期 
            </map>  
        </property>  
    </bean>  --> 
    
    
    
    
    
    
 
    
    
    
    
    
    
    <!-- 激活自动代理功能
    <aop:aspectj-autoproxy proxy-target-class="true"/> -->
    <!--
    <import resource="classpath*:simplesm-context.xml" /> 
    	   
    <bean name="defaultMemcachedClient" class="com.google.code.ssm.CacheFactory">  
        <property name="cacheClientFactory">  
            <bean class="com.google.code.ssm.providers.xmemcached.MemcacheClientFactoryImpl" />  
        </property>  
        <property name="addressProvider">  
            <bean class="com.google.code.ssm.config.DefaultAddressProvider">  
                <property name="address" value="192.168.1.103:2222" />  
            </bean>  
        </property>  
        <property name="configuration">  
            <bean class="com.google.code.ssm.providers.CacheConfiguration">  
                <property name="consistentHashing" value="true" />  
            </bean>  
        </property>  
    </bean>  
    -->  
    
    <!-- ehcache 
    
    <cache:annotation-driven cache-manager="cacheManager" />  

    <bean id="cacheManager" class="org.springframework.cache.ehcache.EhCacheCacheManager">  
        <property name="cacheManager" ref="ehcache"></property>  
    </bean>  

    <bean id="ehcache" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">  
        <property name="configLocation" value="classpath:ehcache-setting.xml"></property>  
    </bean>-->
    
    
    <!-- ehcache -->
</beans>